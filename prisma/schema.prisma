generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  ORG_MEMBER
  ORG_TEACHER
  ORG_PARENT
  ORG_STUDENT
}

enum Gender {
  MALE
  FEMALE
}

enum Ethnicity {
  BRANCO
  NEGRO
  AMERELO
  PARDO
  INDIGENA
}

enum EducationLevel {
  NAO_ALFABETIZADA
  E_F_COMPLETO
  E_F_INCOMPLETO
  E_M_COMPLETO
  E_M_INCOMPLETO
  SUPERIOR
}

model Organization {
  id      String    @id @default(uuid())
  name    String
  logoUrl String?
  cnpj    String
  phone   String?
  User    User[]
  student Student[]
  class   Class[]

  @@map("organization")
}

model User {
  id                String              @id @default(uuid())
  organization      Organization?       @relation(fields: [organizationId], references: [id])
  organizationId    String?
  name              String
  email             String
  password          String
  avatarUrl         String?
  role              UserRole
  userClasses       UserClasses[]
  studentComments   StudentComments[]
  StudentsDocuments StudentsDocuments[]

  @@map("user")
}

model Student {
  id                 String               @id @default(uuid())
  organization       Organization         @relation(fields: [organizationId], references: [id])
  organizationId     String
  name               String
  rg                 String?
  cpf                String?
  nis                String?
  gender             Gender
  ethnicity          Ethnicity
  dateOfBirth        DateTime
  primary_phone      String?
  secondary_phone    String?
  studentClasses     StudentClasses[]
  studentComments    StudentComments[]
  classAttendance    ClassAttendance[]
  StudentsDocuments  StudentsDocuments[]
  StudentResponsible StudentResponsible[]

  @@map("student")
}

model Class {
  id              String            @id @default(uuid())
  organization    Organization      @relation(fields: [organizationId], references: [id])
  organizationId  String
  name            String
  logoUrl         String?
  studentClass    StudentClasses[]
  userClasses     UserClasses[]
  classAttendance ClassAttendance[]

  @@map("class")
}

model StudentClasses {
  id        String  @id @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  class     Class   @relation(fields: [classId], references: [id])
  classId   String

  @@map("student_classes")
}

model UserClasses {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  class   Class  @relation(fields: [classId], references: [id])
  classId String

  @@map("user_classes")
}

model StudentComments {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_comments")
}

model ClassAttendance {
  id           String   @id @default(uuid())
  class        Class    @relation(fields: [classId], references: [id])
  classId      String
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  dateOfClass  DateTime @default(now())
  isPresent    Boolean
  observations String?

  @@map("class_attendance")
}

model StudentsDocuments {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  title     String
  document  String

  @@map("student_documents")
}

model StudentResponsible {
  id              String         @id @default(uuid())
  name            String
  rg              String?
  cpf             String?
  nis             String?
  gender          Gender
  ethnicity       Ethnicity
  dateOfBirth     DateTime
  birth_state     String?
  born_city       String?
  current_job     String?
  primary_phone   String?
  secondary_phone String?
  education_level EducationLevel
  student         Student        @relation(fields: [studentId], references: [id])
  studentId       String

  @@map("student_responsible")
}
